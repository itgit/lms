@model IEnumerable<LMS.Models.Activity>

@{
    ViewBag.Title = "Index";
}

<br />
<br />
<h2>Schedule for @ViewBag.groupname</h2>

@Html.ActionLink("Edit schedule", "Index", "Activities", new { id = ViewBag.groupid }, null)
    <canvas id="schedule" class="col-xs-12" style="padding-right: 0; padding-left: 0;"></canvas>


@section scripts
{
    <script src="https://rawgit.com/maciej-gurban/responsive-bootstrap-toolkit/master/dist/bootstrap-toolkit.min.js"></script>

    <script>

    (function ($, document, window, viewport) {
        $(document).ready(function () {
            drawSchedule(viewport.current());
        });

        $(window).resize(viewport.changed(function () {
            drawSchedule(viewport.current());
        }));

        var mouseX;
        var mouseY;
        var over = false;
        var activityNumber;

        $('#schedule').mousemove(function (e) {
            mouseX = (e.pageX - this.offsetLeft) * (c.height / c.offsetHeight);
            mouseY = (e.pageY - this.offsetTop) * (c.height / c.offsetHeight);
            over = false;

            for (var i = 0; i < activities.length; i++) {
                if (mouseX < activities[i].right && mouseX > activities[i].left && mouseY > activities[i].top && mouseY < activities[i].bottom) {
                    $(this).css('cursor','pointer');
                    over = true;
                    activityNumber = i;
                }
            }
            if (over == false)
            {
                $(this).css('cursor','auto');
            }
        });

        $('#schedule').click(function (e) {
            if (over == true)
            {
                console.log('clicked on activity ' + activities[activityNumber].id);
                var url = '@Url.Action("Details", "Activities")';
                $(location).attr('href', url + '?id=' + activities[activityNumber].id + '&groupid=' + @Model.FirstOrDefault().GroupId);
            }
        });

    }(jQuery, document, window, ResponsiveBootstrapToolkit));

    </script>

    <script>
        var c = document.getElementById("schedule");
        var ctx = c.getContext("2d");
        var topMarginHeight = 40;
        var rightMarginWidth = 10;
        var bottomMarginWidth = 10;
        var scheduleWidth = c.width - leftMarginWidth - rightMarginWidth;
        var scheduleHeight = c.height - topMarginHeight - bottomMarginWidth;
        var fontSize = 20;
        var leftMarginWidth = fontSize * 3;
        var hoursInDay = @(ViewBag.last - ViewBag.first);
        var startTime = @ViewBag.first;

        var activities = [];

        var Activity = function(id, x, y, w, h) {
            this.id = id;
            this.left = x;
            this.top = y;
            this.right = x + w;
            this.bottom = y + h;
        };

        function drawSchedule(size) {

            activities = [];

            if(size == 'xs')
                c.width = 768;
            else if(size == 'sm')
                c.width = 992;
            else if(size == 'md')
                c.width = 1200;
            else
                c.width = 1450;

            c.height = 1.4 * c.width;
            scheduleWidth = c.width - leftMarginWidth - rightMarginWidth;
            scheduleHeight = c.height - topMarginHeight - bottomMarginWidth;

            ctx.translate(leftMarginWidth, topMarginHeight);

            var dayOfWeek =
                [
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday",
                    "Sunday"
                ];

            ctx.fillStyle = "#ffffff";
            ctx.fillRect(0, -topMarginHeight * 0.75, scheduleWidth, topMarginHeight * 0.75);

            ctx.fillStyle = "#e0e0e0";
            ctx.fillRect(0, 0, scheduleWidth, scheduleHeight);

            ctx.strokeStyle = "#000000";
            ctx.lineWidth = 1;

            ctx.beginPath();
            ctx.moveTo(0, -topMarginHeight * 0.75);
            ctx.lineTo(scheduleWidth, -topMarginHeight * 0.75);
            ctx.stroke();

            ctx.beginPath();
            ctx.moveTo(0, 0);
            ctx.lineTo(scheduleWidth, 0);
            ctx.stroke();

            ctx.beginPath();
            ctx.moveTo(scheduleWidth, -topMarginHeight * 0.75);
            ctx.lineTo(scheduleWidth, scheduleHeight);
            ctx.stroke();

            ctx.beginPath();
            ctx.moveTo(0, scheduleHeight);
            ctx.lineTo(scheduleWidth, scheduleHeight);
            ctx.stroke();

            ctx.fillStyle = "#000000";
            ctx.font = fontSize + "px Times";
            ctx.textAlign = "right";

            for (time = 0; time < hoursInDay + 1; time++) {
                ctx.beginPath();
                ctx.moveTo(-12, time * (scheduleHeight / hoursInDay));
                ctx.lineTo(0, time * (scheduleHeight / hoursInDay));
                ctx.stroke();
                ctx.fillText(timeString(time + startTime, 0), -15, time * (scheduleHeight / hoursInDay) + fontSize * 0.25);

                if (time == hoursInDay)
                    break;

                ctx.beginPath();
                ctx.moveTo(-6, (time + (1 / 3)) * (scheduleHeight / hoursInDay));
                ctx.lineTo(0, (time + (1 / 3)) * (scheduleHeight / hoursInDay));
                ctx.stroke();
                ctx.fillText("20", -15, (time + (1 / 3)) * (scheduleHeight / hoursInDay) + fontSize * 0.25);

                ctx.beginPath();
                ctx.moveTo(-6, (time + (2 / 3)) * (scheduleHeight / hoursInDay));
                ctx.lineTo(0, (time + (2 / 3)) * (scheduleHeight / hoursInDay));
                ctx.stroke();
                ctx.fillText("40", -15, (time + (2 / 3)) * (scheduleHeight / hoursInDay) + fontSize * 0.25);
            }

            for (day = 0; day < 5; day++) {
                ctx.beginPath();
                ctx.moveTo(day * (scheduleWidth / 5), -topMarginHeight * 0.75);
                ctx.lineTo(day * (scheduleWidth / 5), scheduleHeight);
                ctx.stroke();

                ctx.fillStyle = "#000000";
                ctx.font = Math.round(fontSize * 1.25) + "px Times";
                ctx.textAlign = "center";
                ctx.fillText(dayOfWeek[day], (day + 0.5) * (scheduleWidth / 5), -topMarginHeight * 0.5 + fontSize * 0.625, (scheduleWidth) / 5);
            }

            @foreach (var activity in Model)
            {
                var line = string.Format("drawActivity({0}, {1}, {2}, {3}, {4}, {5}, \"{6}\");" + Environment.NewLine, activity.Id, (int)activity.Day, activity.StartTime.Hours, activity.StartTime.Minutes, activity.EndTime.Hours, activity.EndTime.Minutes, activity.Name);
                @Html.Raw(line)
            }
        };

        function drawActivity(id, day, startTimeHour, startTimeMinute, endTimeHour, endTimeMinute, description) {
            var startTimeHeight = (scheduleHeight / hoursInDay) * (startTimeHour - startTime + startTimeMinute / 60);
            var endTimeHeight = (scheduleHeight / hoursInDay) * (endTimeHour - startTime + endTimeMinute / 60);
            ctx.fillStyle = "#ffffff";
            ctx.strokeStyle = "#000000";
            ctx.fillRect(day * (scheduleWidth / 5), startTimeHeight, scheduleWidth / 5, endTimeHeight - startTimeHeight);
            ctx.strokeRect(day * (scheduleWidth / 5), startTimeHeight, scheduleWidth / 5, endTimeHeight - startTimeHeight);
            ctx.font = Math.round(fontSize * 0.75) + "px Times";
            ctx.textAlign = "left";
            var header = timeString(startTimeHour, startTimeMinute);
            var textWidth = ctx.measureText(header).width;
            ctx.fillRect(day * (scheduleWidth / 5) + 10, startTimeHeight - fontSize * 0.5, textWidth + 10, fontSize);
            ctx.fillStyle = "#000000";
            ctx.fillText(header, day * (scheduleWidth / 5) + 15, startTimeHeight + fontSize * 0.25);
            var footer = timeString(endTimeHour, endTimeMinute);
            textWidth = ctx.measureText(footer).width;
            ctx.fillStyle = "#ffffff";
            ctx.fillRect((day + 1) * (scheduleWidth / 5) - 20 - textWidth, endTimeHeight - fontSize * 0.5, textWidth + 10, fontSize);
            ctx.fillStyle = "#000000";
            ctx.fillText(footer, (day + 1) * (scheduleWidth / 5) - textWidth - 15, endTimeHeight + fontSize * 0.25);
            ctx.font = Math.round(fontSize * 1.25) + "px Times";
            ctx.textAlign = "center";
            ctx.fillText(description, (day + 0.5) * (scheduleWidth / 5), (startTimeHeight + endTimeHeight) * 0.5 + fontSize * 0.3125);
            var activity = new Activity(
                id,
                day * (scheduleWidth / 5) + leftMarginWidth, 
                startTimeHeight + topMarginHeight, 
                scheduleWidth / 5, 
                endTimeHeight - startTimeHeight
            );
            activities.push(activity);
        }

        function timeString(hour, minute) {
            return ('0' + hour).slice(-2) + ':' + ('0' + minute).slice(-2);
        }

    </script>
}